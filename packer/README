# Package Challenge

You want to send your friend a package with different things.
Each thing you put inside the package has such parameters as index number, weight and cost. The
package has a weight limit. Your goal is to determine which things to put into the package so that the
total weight is less than or equal to the package limit and the total cost is as large as possible.
You would prefer to send a package which weighs less in case there is more than one package with the
same price.

# Input Sample
Your API should accept as its only argument a path to a filename. The input file contains several lines.
Each line is one test case.
Each line contains the weight that the package can take (before the colon) and the list of items you need
to choose. Each item is enclosed in parentheses where the 1st number is a item’s index number, the 2nd
is its weight and the 3rd is its cost.

# Input Example

81 : (1,53.38,€45) (2,88.62,€98) (3,78.48,€3) (4,72.30,€76) (5,30.18,€9) (6,46.34,€48)
8 : (1,15.3,€34)
75 : (1,85.31,€29) (2,14.55,€74) (3,3.98,€16) (4,26.24,€55) (5,63.69,€52) (6,76.25,€75) (7,60.02,€74) (8,93.18,€35) (9,89.95,€78)
56 : (1,90.72,€13) (2,33.80,€40) (3,43.15,€10) (4,37.97,€16) (5,46.81,€36) (6,48.77,€79) (7,81.80,€45) (8,19.36,€79) (9,6.76,€64)
```
# Output sample

Output contains a List with the maximum weight the package can hold for the given test case
The cost of the package
The combination of packages for each line

Combination(weight=72.29999999999998, cost=76.0, combPkgList=[Package(index=4, weight=72.3, cost=76.0)]),
null,
Combination(weight=44.76999999999997, cost=145.0, combPkgList=[Package(index=2, weight=14.55, cost=74.0), Package(index=3, weight=3.98, cost=16.0), Package(index=4, weight=26.24, cost=55.0)]),
Combination(weight=55.529999999999994, cost=143.0, combPkgList=[Package(index=6, weight=48.77, cost=79.0), Package(index=9, weight=6.76, cost=64.0)])

The combination is identified based on the maximum possible cost for each test case.



